@DSL Implicit;
@Behaviour GTN;
@Author Mohamed Shokeir;
@Date 24/02/2020;

@Brick StandardElasticity;
@ModellingHypotheses {".+"};
@StrainMeasure Hencky;

@Algorithm NewtonRaphson_NumericalJacobian;
@Epsilon 1e-15;
@Theta 1;

@Includes{
#include "../newton_niter.hpp"
}

@ComputeStiffnessTensor<UnAltered> {70e3,0.3};

//Definir les variables
@ExternalStateVariable real phi;
phi.setEntryName("ThermalNeutronFluence");
@PhysicalBounds phi in [0:*[;
@Bounds phi in [0:1000];

@MaterialProperty real fN;
fN.setEntryName("fN");
@MaterialProperty real fc;
fc.setEntryName("fc");
@MaterialProperty real fr;
fr.setEntryName("fr");
@MaterialProperty real q1;
q1.setEntryName("q1");
@MaterialProperty real q2;
q2.setEntryName("q2");
@MaterialProperty real An0;
An0.setEntryName("An0");
@MaterialProperty real ps;
ps.setEntryName("ps");
@MaterialProperty real sigseuil;
sigseuil.setEntryName("sigseuil");

@StateVariable real p;
p.setGlossaryName("EquivalentPlasticStrain");

@AuxiliaryStateVariable real f;
f.setGlossaryName("Porosity");
@PhysicalBounds f in [0:1];

@Parameter s0 = 274.;
s0.setGlossaryName("YieldStress");

@LocalVariable bool plast;
@LocalVariable bool bf;

@LocalVariable stress sig0;
@LocalVariable stress sigs;
@LocalVariable strain eps_phi;
@LocalVariable double delta;

eel.setMaximumIncrementValuePerIteration(1.e-4);
p.setMaximumIncrementValuePerIteration(1.e-4);
//f.setMaximumIncrementValuePerIteration(1.e-4);

@AuxiliaryStateVariable stress sstar_el;
@AuxiliaryStateVariable stress fstar_el;
@AuxiliaryStateVariable stress sstar;
@AuxiliaryStateVariable real fstar;
@AuxiliaryStateVariable real fn;
@AuxiliaryStateVariable real fg;
@AuxiliaryStateVariable real broken;
@AuxiliaryStateVariable real niter_el;
@AuxiliaryStateVariable real niter;
@AuxiliaryStateVariable stress sigI;

@InitLocalVariables{
  const StressStensor sig_el = computeElasticPrediction();
  const double tr_el     = trace(sig_el);
  const double seq       = sigmaeq(sig_el);
               delta     = ((1. / q1) - fc) / (fr - fc);
               //delta     = 1.;
               fstar_el  = (f<fc) ? f : fc + (f-fc)*delta;
  const double guess2_el = sqrt((4 * seq * seq) + (q1 * q2 * q2 * fstar * tr_el * tr_el)) / (2. * (1. + q1 * fstar));
  //solve for sig star
  //sstar_el = scalarNewtonSolver(myfunction, derivMyFunction, {seq, tr_el, q1, q2, fstar_el}, {guess2_el});
  std::vector<double> sstar_el_res = scalarNewtonSolver(myfunction, derivMyFunction, {seq, tr_el, q1, q2, fstar_el}, {guess2_el});
  sstar_el = sstar_el_res[0];

  sig0     = (274. + 26.175823633727898   * pow(phi, 0.42106414268927667));
  sigs     = (310. + 25.81119886007225    * pow(phi, 0.3978634475501675));
  eps_phi  = (0.0635340625  - 0.013950378309324024 * pow(phi, 0.22164422977868983));
  double R = sig0 + (sigs - sig0) * (1. - exp(-p / max(eps_phi, 1.e-10)));
  plast    = sstar_el - R > 0;
  bf       = false;
}

@Integrator{
  if (broken != 0){
    return true;
  } 
  
  if (!plast) {
    // elastic case
    return true;
  }
  const Stensor id = Stensor::Id();

  // quantities at t+theta*dt;
  const double pt  = max(p + theta * dp, strain(0));
//  const double ft  = max(min(f + theta * df, real(1)), real(0));
//  const double rVt = (1 - ft);
  const double rVt = (1 - f);

  // equivalent and effective stresses 
  const StressStensor s   = deviator(sig);
  const double tr         = trace(sig);
  const double seq        = sigmaeq(sig);
               fstar      = (f < fc) ? f : fc + (f - fc) * delta;
               //fstar      = (ft < fc) ? ft : fc + (ft - fc) * delta;
        //double dfstar     = (ft < fc) ? 1. : delta;
        double dfstar     = (f < fc) ? 1. : delta;
                //fstar     = ft * exp(0.1 * ft);
        //double dfstar     = exp(0.1 * ft) + 0.1 * ft * exp(0.1 * ft);
  const double guess2     = sqrt((4 * seq * seq) + (q1 * q2 * q2 * fstar * tr * tr)) / (2. * (1. + q1 * fstar));
 //              sstar      = scalarNewtonSolver(myfunction, derivMyFunction, {seq, tr, q1, q2, fstar}, {guess2});
  std::vector<double> sstar_res = scalarNewtonSolver(myfunction, derivMyFunction, {seq, tr, q1, q2, fstar}, {guess2});
  sstar = sstar_res[0];
  niter = sstar_res[1];

  const double isstar     = 1. / max(sstar, 1.);
  const double isstar2    = isstar * isstar;
  
  // GTN derivatives
  const double cosh_  = cosh(q2 * tr * 0.5 * isstar);
  const double sinh_  = sinh(q2 * tr * 0.5 * isstar);
  const double q1q2_  = q1 * q2 * fstar * isstar;
  const double dS_dsstar       = (-2. * seq * seq * isstar2 * isstar) - (q1q2_ *isstar * tr * sinh_);
  const double idS_dsstar      = 1. / dS_dsstar;
  //const double idS_dsstar      = 1. / max(dS_dsstar, -1.e-10);
  const Stensor dS_dsig        = (3. * s  * isstar2) + (q1q2_ * sinh_ * id);
  const Stensor4 d2S_dsig2     = (2. * Stensor4::M() * isstar2) + (q1q2_ * q2 * 0.5 * isstar * cosh_) * (id ^ id);
  const Stensor d2S_dsigdsstar = (-6. * s * isstar2 * isstar) - (q1q2_ * isstar * sinh_ * id) - (q1q2_ * q2 * 0.5 * isstar2 * tr * cosh_ * id);
  const double dS_ddf          = ((2. * q1 * cosh_) - (2. * q1 * q1 * f)) * dfstar; 
  const Stensor d2S_dsigddf    = (q1 * q2 * isstar * sinh_ * id) * dfstar;
  const double d2S_dsstarddf   = (-q1 * q2 * isstar2 * tr * sinh_) * dfstar;

  // normal and derivatives
  const Stensor n         = eval(-idS_dsstar * dS_dsig);
  const double tr_n       = trace(n);
  const Stensor4 N        = (-d2S_dsig2 * idS_dsstar) - (dS_dsig ^ d2S_dsigdsstar) * (idS_dsstar * idS_dsstar); 
  const double dsstar_ddf = -idS_dsstar * dS_ddf;
  const Stensor dn_ddf    = (-d2S_dsigddf * idS_dsstar) - (dS_dsig * d2S_dsstarddf * idS_dsstar * idS_dsstar);
  const Stensor4 dn_ddeel = theta * N * D;
 
  // split of the total strain
  feel        += rVt * dp * n;
  //dfeel_ddeel += rVt * dp * dn_ddeel;
  //dfeel_ddp    = rVt * n;
  //dfeel_ddf    = theta * dp * (rVt * dn_ddf - n);
  
  // plastic evolution
  const double exp_pt = exp(-pt / max(eps_phi, 1.e-10));
  const double R      = sig0 + (sigs - sig0) * (1. - exp_pt);
  const double dR_dp  = -(sigs - sig0) * exp_pt / eps_phi;
  fp = (sstar - R) / young;
  if (sstar > 10 * R) {
    return false;
  }
  //dfp_ddeel = dn_ddeel / young;
  //dfp_ddp   = theta * dR_dp /  young;
  //dfp_ddf   = theta * dsstar_ddf / young;
//if (bf) {
  // porosity evolution
//  ff       -= rVt * rVt * dp * (n | id);  // sans germination
  //dff_ddeel = -rVt * rVt * dp * (id | dn_ddeel);
  //dff_ddp   = -rVt * rVt * tr_n;
  //dff_ddf  += theta * dp * tr_n * 2 * rVt - rVt * rVt * dp * trace(dn_ddf);
  //if (pt > ps && ft < fN) {
//  if (pt > ps) {
  // maximal stress' eigen value and derivative
//    tmatrix<3u, 3u, real> mp;
//    tvector<3u, real> vp;
//    std::tie(vp, mp) = sig.computeEigenVectors();
 //   const int indmax = [&vp]() -> short {
////      if ((vp(1) >= vp(0)) && (vp(1) >= vp(2))) {
//        return 1;
//      } if ((vp(2) >= vp(0)) && (vp(2) >= vp(1))) {
  //      return 2;
//      }
//      return 0;
 //   }();
////    Stensor ds[3];
//    std::tie(ds[0], ds[1], ds[2]) = sig.computeEigenTensors(mp);
//    const Stensor dsI_ddeel = eval(ds[indmax] * theta * D);
//    const double vpseuil    = (vp(indmax) > sigseuil) ? 1 : 0;
//    const double rvp        = vp(indmax) / sigseuil - 1;
//    const double rvp_2      = power<2>(rvp);
//    const double An         = An0 * vpseuil;
//    ff        -= An * rvp_2 * dp;  // loi Tom;
    //dff_ddeel -= 2 * An * dp * rvp * dsI_ddeel / sigseuil;
    //dff_ddp   -= An * rvp_2;
//  } // end of if (p > ps)
// } // end of if(bf)
  //broken     = (sqrt((-2. * q1 * fstar) - (-1. - q1 * q1 * fstar * fstar)) < 1.e-2) ? 1 : 0;
} // end of @Integrator


@UpdateAuxiliaryStateVariables {
  const Stensor id        = Stensor::Id();
  const StressStensor s   = deviator(sig);
  const double tr         = trace(sig);
  const double seq        = sqrt(3. * (s | s) / 2.);
               fstar      = (f < fc) ? f : fc + (f - fc) * delta;
        double dfstar     = (f < fc) ? 1. : delta;
  const double guess2     = sqrt((4 * seq * seq) + (q1 * q2 * q2 * fstar * tr * tr)) / (2. * (1. + q1 * fstar));
              // sstar      = scalarNewtonSolver(myfunction, derivMyFunction, {seq, tr, q1, q2, fstar}, {guess2});
  std::vector<double> sstar_res = scalarNewtonSolver(myfunction, derivMyFunction, {seq, tr, q1, q2, fstar}, {guess2});
  sstar = sstar_res[0];
  niter = sstar_res[1];
  const double isstar     = 1. / max(sstar, 1.);
  const double isstar2    = isstar * isstar;
  
  // GTN derivatives
  const double sinh_  = sinh(q2 * tr * 0.5 * isstar);
  const double q1q2_  = q1 * q2 * fstar * isstar;
  const double dS_dsstar       = (-2. * seq * seq * isstar2 * isstar) - (q1q2_ *isstar * tr * sinh_);
  const double idS_dsstar      = 1. / dS_dsstar;
  const Stensor dS_dsig        = (3. * s  * isstar2) + (q1q2_ * sinh_ * id);

  // normal and derivatives
  const Stensor n         = eval(-idS_dsstar * dS_dsig);
  
  f     += (1 -f) * (1 - f) * dp * (n | id); 
  if (p > ps && f<fN) {
  // maximal stress' eigen value and derivative
    tmatrix<3u, 3u, real> mp;
    tvector<3u, real> vp;
    std::tie(vp, mp) = sig.computeEigenVectors();
    const int indmax = [&vp]() -> short {
      if ((vp(1) >= vp(0)) && (vp(1) >= vp(2))) {
        return 1;
      } if ((vp(2) >= vp(0)) && (vp(2) >= vp(1))) {
      return 2;
      }
      return 0;
    }();
    Stensor ds[3];
    std::tie(ds[0], ds[1], ds[2]) = sig.computeEigenTensors(mp);
    sigI = vp(indmax);
    const Stensor dsI_ddeel = eval(ds[indmax] * theta * D);
    const double vpseuil    = (vp(indmax) > sigseuil) ? 1 : 0;
    const double rvp        = vp(indmax) / sigseuil - 1;
    const double rvp_2      = power<2>(rvp);
    const double An         = An0 * vpseuil;
    
    f     +=  An * rvp_2 * dp;
    fn    += An * rvp_2 * dp;  
  } //end of (p > ps)
 fg = f - fn;

 fstar  = (f < fc) ? f : fc + (f - fc) * delta;
 
  broken = (sqrt((-2. * q1 * fstar) - (-1. - q1 * q1 * fstar * fstar)) < 1.e-2) ? 1 : 0;
  if (broken == 1) {
    sig *= 0;
  }  
  
}

//@AdditionalConvergenceChecks {
//  if (converged && (!bf)) {
//    converged = false;
//    bf = true;
  // pas sûr, peut aider, ou pas
//    if (p < ps) {
//      const auto dfe = (1 - f) * (1 - f) * dp * 3 * f * trace(sig);
//      df = max(min(dfe / 2, 1 - f), -f);
//    }
//  }
//}
